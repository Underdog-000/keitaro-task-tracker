module.exports = async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).send('Only POST allowed');

  const apiKey = process.env.KEITARO_API_KEY;
  const { campaignId, from, to } = req.body;

  const headers = {
    'Api-Key': apiKey,
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    const response = await fetch('https://lponlineshop.site/admin_api/v1/report/build', {
      method: 'POST',
      headers,
      body: JSON.stringify({
        range: { from, to, timezone: "Europe/Moscow" },
        columns: ["offer_id"],
        metrics: [
          "conversions", "cr", "approve", "cpc", "cpa", "cost", "sale_revenue"
        ],
        grouping: ["offer"],
        filters: [{
          name: "campaign_id",
          operator: "EQUALS",
          expression: String(campaignId)
        }],
        limit: 100
      })
    });

    if (!response.ok) {
      const error = await response.text();
      return res.status(response.status).send(error);
    }

    const report = await response.json();
    const rows = report.rows || [];

    console.log('üü° –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ—Ç—á—ë—Ç–µ:', rows.length);
    rows.forEach(r => {
      console.log(`üî∏ Offer –≤ –æ—Ç—á—ë—Ç–µ:`, typeof r.offer === 'string' ? r.offer : JSON.stringify(r.offer));
    });

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–º—ë–Ω –æ—Ñ—Ñ–µ—Ä–æ–≤
    const campaignRes = await fetch(`https://lponlineshop.site/admin_api/v1/campaigns/${campaignId}`, { headers });
    const campaign = await campaignRes.json();

    const offersMap = {};
    for (const stream of campaign.streams || []) {
      for (const path of stream.paths || []) {
        for (const offer of path.offers || []) {
          offersMap[offer.id] = offer.name;
        }
      }
    }

    // 3. –û–±–æ–≥–∞—â–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –≤ rows
    rows.forEach(row => {
      if (typeof row.offer === 'string') {
        row.offer = {
          id: row.offer_id ?? null,
          name: row.offer
        };
      }

      const offerId = row.offer?.id;
      if (offerId && offersMap[offerId]) {
        row.offer.name = offersMap[offerId];
        console.log(`üü¢ –û–±–æ–≥–∞—â–µ–Ω–æ –∏–º—è –æ—Ñ—Ñ–µ—Ä–∞ [${offerId}]: ${row.offer.name}`);
      } else {
        console.warn(`‚ö†Ô∏è –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ [${offerId}]`);
      }
    });

    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π summary ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å, fallback –Ω–µ –Ω—É–∂–µ–Ω
    const summary = report.summary || {};

    res.status(200).json({ rows, summary });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ report.js:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: err.message });
  }
};
