let tasks = [];

function openModal() {
  document.getElementById('taskModal').classList.remove('hidden');
}
function closeModal() {
  document.getElementById('taskModal').classList.add('hidden');
}
function openSettings() {
  document.getElementById('settingsModal').classList.remove('hidden');
}
function closeSettings() {
  document.getElementById('settingsModal').classList.add('hidden');
}

function createTask() {
  const name = document.getElementById('testName').value;
  const campaign = document.getElementById('campaignSelect').value;
  const time = new Date().toLocaleTimeString();

  const task = { name, campaign, time, done: false };
  tasks.push(task);
  renderTasks();
  closeModal();
}

function completeTask(index) {
  tasks[index].done = true;
  tasks[index].endTime = new Date().toLocaleTimeString();
  renderTasks();
}

function renderTasks() {
  const workingEl = document.getElementById('workingTasks');
  const doneEl = document.getElementById('doneTasks');
  workingEl.innerHTML = '';
  doneEl.innerHTML = '';

  tasks.forEach((task, i) => {
    const el = document.createElement('div');
    el.className = 'task-card';
    el.innerHTML = `
      <div><b>${task.name}</b><br/>${task.campaign}</div>
      <div class="actions">
        ${task.done ? `üïí ${task.time} ‚Üí ${task.endTime}` 
                    : `<button onclick="completeTask(${i})">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>`}
      </div>
    `;
    task.done ? doneEl.appendChild(el) : workingEl.appendChild(el);
  });
}

function toggleColumn(id) {
  const el = document.getElementById(id);
  el.style.display = el.style.display === 'none' ? 'flex' : 'none';
}

function saveApiKey() {
  const key = document.getElementById('apiKeyInput').value;
  localStorage.setItem('keitaro_api_key', key);
  alert('–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
}
async function fetchCampaigns() {
  const apiKey = localStorage.getItem('keitaro_api_key');
  if (!apiKey) return;

  try {
    const res = await fetch('https://forextradingpips.com/admin_api/v1/campaigns', {
      headers: {
        'Api-Key': apiKey,
        'Accept': 'application/json'
      }
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ API");
    const data = await res.json();

    const select = document.getElementById('campaignSelect');
    select.innerHTML = '';
    data.forEach(c => {
      const option = document.createElement('option');
      option.value = c.id;
      option.textContent = c.name;
      select.appendChild(option);
    });

  } catch (err) {
    alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Keitaro API. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.");
    console.error(err);
  }
}

function saveApiKey() {
  const key = document.getElementById('apiKeyInput').value;
  localStorage.setItem('keitaro_api_key', key);
  alert('–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
  closeSettings();
  fetchCampaigns(); // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–∞–º–ø–∞–Ω–∏–∏
}

window.addEventListener('DOMContentLoaded', () => {
  // –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–±—É–µ–º –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
  if (localStorage.getItem('keitaro_api_key')) {
    fetchCampaigns();
  }
});


function logout() {
  localStorage.removeItem('keitaro_api_key');
  alert('–í—ã –≤—ã—à–ª–∏');
}
